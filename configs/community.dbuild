# surely-not-100%-complete/accurate list, but,
# the following 2.12 projects are currently not included in 2.13
#
# * akka-more: because they are using deprecated/removed stuff;
#   see https://github.com/akka/akka/issues/22581.
# * akka-http, akka-sse, akka-contrib-extra, play-ws, play-core,
#   conductr-lib: because they depend on akka-more
# * scalameter: because scalaVersion handling in their
#   project/Build.scala needs updating
# * scala-refactoring: ???, investigation needed
# * gigahorse: requires akka-http
# * lightbend-emoji, sbt, zinc, sbt-*, circe, cats-effect,
#   scalalib, scalachess: built with sbt 1, which doesn't support Scala 2.13 yet
# * fs2, monix: depend on cats-effect
# * jawn-fs2, http4s: depend on fs2
# * everything in the scalameta_1 and scalameta_2 spaces
#   (scalameta is too fragile, for now, for 2.13)
#
# we should attempt to add them back later in the 2.13 cycle (by
# copying their entries from the 2.12 config)
#
# the following moribund projects were dropped here and don't need to
# be re-added:
#
# * parboiled (but note we do have parboiled2)

//// about spaces

// currently we have five spaces.

// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
//   on sjson-new) and the sbt team is worried about the possible
//   impact of upgrading on binary compatibility of sbt plugins.
// but in the meantime the whole Typelevel ecosystem is moving onto
//   jawn 0.11, and the two versions are source-incompatible.

// the scalameta split is because we want to have both scalafmt
//   and scalafix, but the latter uses scalameta 2.x while the
//   former is stuck in scalameta 1.x land.  (this is easy to
//   keep segregated since scalafmt and scalafix tend to be
//   build-level dependencies, not project-level dependencies.)

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.16"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  space: scala

  projects: [
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git"
        // override sbt version here since otherwise we get
        // whatever random sbt version the module has
        extra.sbt-version: ${vars.sbt-version}
        extra.commands: ${vars.default-commands} [
          // override scalaVersion here since otherwise we get
          // whatever random Scala version the module has
          "set scalaVersion := \""${vars.scala-version}"\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xmlJVM"]
      }
    ]
  }
]}
