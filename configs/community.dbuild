//// about spaces

// we have these spaces:
// - scala
//   - scala.main
//     - scala.main.jawn_0_11
// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
// on sjson-new) and the sbt team doesn't want to break  binary compatibility
// of sbt plugins. nearly everything else is on jawn 0.11, and the two versions
// are source-incompatible.
//
// in 2.13 we currently aren't even trying to build jawn 0.10 world.
// most of that world is old frozen versions of sbt(+modules) and zinc
// anyway, plus scaladex which hasn't moved to 2.13 and it's not clear
// if it will.

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-0-13-version: "0.13.18"
  sbt-1-2-version: "1.2.8"
  sbt-version: "1.3.0-RC3"
}

//// compiler options manipulation

// appendScalacOptions, removeScalacOptions, removeDependency
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterSetting[T](s: State, setting: SettingKey[T])(fn: T => T) = alterKeyImpl(s, setting)(fn)
  def alterTask[T](s: State, task: TaskKey[T])(fn: T => T) = alterKeyImpl(s, task)(fn)
  def alterKeyImpl[T](s: State, scopedKey: Scoped)(fn: T => T) = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scopedKey.key).map(_.scope).distinct
    val redefined = (scopedKey: @unchecked) match {
      case setting: SettingKey[T @unchecked] => scopes.map(scope => setting in scope ~= fn)
      case task: TaskKey[T @unchecked]       => scopes.map(scope => task in scope ~= fn)
    }
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]): State = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterTask(s, scalacOptions)(appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]): State =
    alterTask(s, scalacOptions)(_.filterNot(args.contains))
  def removeDependency(s: State, args: Seq[String]): State = {
    require(args.size == 2)
    alterSetting(s, libraryDependencies)(
      _.filterNot(mod => mod.organization == args(0) && mod.name == args(1)))
  }
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions),
    Command.args("removeDependency", "<org> <artifact>")(removeDependency))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.default-commands += "removeScalacOptions -Xfatal-warnings -Yno-adapted-args -Ywarn-inaccessible -Ywarn-nullary-override -Ywarn-nullary-unit -Ywarn-infer-any -Ywarn-unused-import -Ypartial-unification -Ywarn-adapted-args -Xmax-classfile-name -Ymacro-no-expand"
vars.base.extra.commands = ${vars.default-commands}

//// count lines of code

vars.base.extra.settings = ["""libraryDependencies in ThisBuild += compilerPlugin("com.lightbend" %% "cloc-plugin" % "0")"""]
vars.base.deps.inject: ["com.lightbend#cloc-plugin"]

//// cache

// new behemoths have much more disk space, so let's try keeping stuff
// substantially longer (2 weeks instead of 4-5 days) and see what
// the effect on disk space usage is, starting March 17 2018
options.cleanup: {
  extraction: {
    success: 336
    failure: 336
  }
  build: {
    success: 336
    failure: 336
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}

  space: scala

  projects: [
  {
    name: "cloc-plugin"
    uri:  "https://github.com/SethTisue/cloc-plugin.git"
  }
  {
    name:  "scala"
    system: assemble
    cross-version: binary
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
    ]
  }

]}

//// space: scala.main

build += {

  space: scala.main

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-xml"
    uri:  ${vars.uris.scala-xml-uri}
    extra.projects: ["xml"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
  }

  // see also scalatest-tests
  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra.projects: ["scalatest", "scalactic"]
    extra.commands: ${vars.base.extra.commands} [
      // sbt 1.3.0-RC3 specific:
      // [error] java.lang.RuntimeException: Credentials file /Users/tisue/.sbt/specs2.credentials does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scalatestplus-junit"
    uri:  ${vars.uris.scalatestplus-junit-uri}
    extra.commands: ${vars.base.extra.commands} [
      // sbt 1.3.0-RC3 specific:
      // [error] java.lang.RuntimeException: Credentials file /Users/tisue/.sbt/specs2.credentials does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scalatestplus-testng"
    uri:  ${vars.uris.scalatestplus-testng-uri}
    extra.commands: ${vars.base.extra.commands} [
      // sbt 1.3.0-RC3 specific:
      // [error] java.lang.RuntimeException: Credentials file /Users/tisue/.sbt/specs2.credentials does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scalatestplus-scalacheck"
    uri:  ${vars.uris.scalatestplus-scalacheck-uri}
    extra.projects: ["scalatestPlusScalaCheckJVM"]
    // scala.MatchError: ff6da566+20190524-1028-SNAPSHOT (of class java.lang.String)
    //   at com.typesafe.dbuild.project.build.LocalBuildRunner$.prepareDepsArtifacts(LocalBuildRunner.scala:106)
    extra.settings: ${vars.base.extra.settings} [
      "version in ThisBuild := \"1.0.0\""
    ]
    extra.commands: ${vars.base.extra.commands} [
      // sbt 1.3.0-RC3 specific:
      // [error] java.lang.RuntimeException: Credentials file /Users/tisue/.sbt/specs2.credentials does not exist
      "set every credentials := Seq()"
    ]
  }

]}
