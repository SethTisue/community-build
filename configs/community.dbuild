# surely-not-100%-complete/accurate list, but,
# the following 2.12 projects are currently not included in 2.13
#
# * akka-more: because they are using deprecated/removed stuff;
#   see https://github.com/akka/akka/issues/22581.
# * akka-http, akka-sse, akka-contrib-extra, play-ws, play-core,
#   conductr-lib, lagom: because they depend on akka-more
# * scalameter: because scalaVersion handling in their
#   project/Build.scala needs updating
# * scala-refactoring: ???, investigation needed
# * gigahorse: requires akka-http
# * lightbend-emoji, sbt, zinc, sbt-*, circe, cats-effect,
#   scalalib, scalachess: built with sbt 1, which doesn't support Scala 2.13 yet
# * fs2, monix: depend on cats-effect
# * jawn-fs2, http4s: depend on fs2
# * everything in the scalameta_1 and scalameta_2 spaces
#   (scalameta is too fragile, for now, for 2.13)
# * was failing, but even investigating can wait:
#   twotails, scallop, twirl, slick, scalatest-tests, scalariform
#   (and its dependency scalastyle)
# * stopped compiling, not investigated: jackson-module-scala
#   (also removed its dependency elastic4s)
# * shapeless, scalaz (neither compiles, currently)
#
# and then also a huge swath of dozens of projects had to be removed
# because they depend directly or indirectly on either scalaz or
# shapeless (see https://scala-ci.typesafe.com/view/scala-2.13.x/job/scala-2.13.x-integrate-community-build/905/consoleFull
# for a view of what the dependencies were before this massive removal)
#
# we should attempt to add everything back later in the 2.13 cycle (by
# copying their entries from the 2.12 config)
#
# the following moribund projects were dropped here and don't need to
# be re-added:
#
# * parboiled (but note we do have parboiled2)

//// about spaces

// currently we have five spaces.

// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
//   on sjson-new) and the sbt team is worried about the possible
//   impact of upgrading on binary compatibility of sbt plugins.
// but in the meantime the whole Typelevel ecosystem is moving onto
//   jawn 0.11, and the two versions are source-incompatible.

// the scalameta split is because we want to have both scalafmt
//   and scalafix, but the latter uses scalameta 2.x while the
//   former is stuck in scalameta 1.x land.  (this is easy to
//   keep segregated since scalafmt and scalafix tend to be
//   build-level dependencies, not project-level dependencies.)

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.17-RC2"
  sbt-1-version: "1.1.0"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// count lines of code

vars.base.extra.settings = ["""libraryDependencies in ThisBuild += compilerPlugin("com.lightbend" %% "cloc-plugin" % "0")"""]
vars.base.deps.inject: ["com.lightbend#cloc-plugin"]

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  space: scala

  projects: [
  {
    name: "cloc-plugin"
    uri:  "https://github.com/SethTisue/cloc-plugin.git"
  }
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git"
        // override sbt version here since otherwise we get
        // whatever random sbt version the module has
        extra.sbt-version: ${vars.sbt-version}
        extra.commands: ${vars.default-commands} [
          // override scalaVersion here since otherwise we get
          // whatever random Scala version the module has
          "set scalaVersion := \""${vars.scala-version}"\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xmlJVM"]
      }
    ]
  }
]}


//// space: scala

build += {

  space: scala

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS"]
  }

  // forked (January 2018) waiting for this PR to be merged from 0.6.x onto master:
  //   https://github.com/scala-js/scala-js/pull/3270
  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
    extra.options: ["-Xmx2048m"]
    // not really sure how this list was arrived at
    extra.projects: [ io, logging, linker, testSuite, stubs ]
    extra.commands: ${vars.default-commands} [
      // - Disable fatal Scaladoc warnings, too fragile
      "removeScalacOptions -Xfatal-warnings"
      // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
      //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
      //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
      "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
    ]
  }

  // frozen (June 2017) at an April 2017 commit; newer commits
  // broke the scalacheck subproject of specs2
  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // because of new unused warnings in 2.12.2
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  // see also scalatest-tests
  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra.projects: ["scalatest", "scalactic"]
  }

  ${vars.base} {
    name: "scala-partest-interface"
    uri:  ${vars.uris.scala-partest-interface-uri}
  }

  ${vars.base} {
    name: "scala-partest"
    uri:  ${vars.uris.scala-partest-uri}
    extra.commands: ${vars.default-commands} [
      // Deprecated optimizer settings
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scala-swing"
    uri:  ${vars.uris.scala-swing-uri}
  }

  ${vars.base} {
    name: "collection-strawman"
    uri:  ${vars.uris.collection-strawman-uri}
    // no Scala.js, no benchmarks
    extra.projects: ["collectionsJVM", "collections-contribJVM", "junit", "scalacheck"]
  }

  // tracking master as of December 2016.  if master proves unstable,
  // we could try "release-0.8" (or a newer branch if there is one)
  ${vars.base} {
    name: "scala-stm"
    uri:  ${vars.uris.scala-stm-uri}
    // scala.concurrent.stm.CommitBarrierSuite failing;
    // reported upstream at https://github.com/nbronson/scala-stm/issues/53
    // (report updated December 2017)
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scoverage"
    uri:  ${vars.uris.scoverage-uri}
    extra.exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
    // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    // January 2018: failure's continued existence confirmed
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri:  ${vars.uris.scala-java8-compat-uri}
    extra.commands: ${vars.default-commands} [
      // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
      // we use "assert" as an identifier there. We disable doc building to avoid that.
      "set publishArtifact in packageDoc := false"
    ]
    // 2.13 regression? https://github.com/scala/scala-java8-compat/issues/97
    extra.run-tests: false
  }

  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "scala-records"
    uri:  ${vars.uris.scala-records-uri}
    extra.exclude: [
      "coreJS"  // no Scala.js please
      "root"    // dbuild thinks it tries to publish root#root
    ]
  }

  ${vars.base} {
    name: "genjavadoc"
    uri:  ${vars.uris.genjavadoc-uri}
  }

  // forked August 2017 for version checking logic in build;
  // fork refreshed October 2017; needed upstream change
  // https://github.com/akka/akka/pull/23875 was merged, but
  // we can't unfork until we have an sbt 1.0.x release that
  // works with Scala 2.13 (https://github.com/sbt/sbt/issues/3427)
  ${vars.base} {
    name: "akka-actor"
    uri:  ${vars.uris.akka-actor-uri}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
    extra.projects: ["akka-actor"]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
    ]
  }

  ${vars.base} {
    name: "scala-async"
    uri:  ${vars.uris.scala-async-uri}
  }

  ${vars.base} {
    name: "sbt-testng"
    uri:  ${vars.uris.sbt-testng-uri}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
  }

  // forked (October 2017) to work around unfriendliness between dbuild
  // and sbt-houserules 0.3.4; details at
  // https://github.com/scala/community-builds/issues/603 . we should
  // be able to unfork once sbt 0.13.17 is out and a new sbt-houserules
  // removes the offending workaround code
  ${vars.base} {
    name: "sbinary"
    uri:  ${vars.uris.sbinary-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // may be needed again once we're on current sbt-houserules again
    // extra.commands: ${vars.default-commands} ["set every scalafmtOnCompile := false"]
    // check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "utest"
    uri:  ${vars.uris.utest-uri}
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

  ${vars.base} {
    name: "acyclic"
    uri:  ${vars.uris.acyclic-uri}
  }

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "fastparse"
    uri:  ${vars.uris.fastparse-uri}
    extra.projects: [
      "fastparseJVM"   // no Scala.js plz
      "scalaparseJVM"  // not essential to include, but hey
    ]
  }

  // forked (May 2017) to make a trivial source change for 2.12.3 compat;
  // see https://github.com/scalamacros/paradise/issues/98
  ${vars.base} {
    name: "macro-paradise"
    uri:  ${vars.uris.macro-paradise-uri}
    // this subproject stopped compiling when Adriaan changed the REPL
    // code around; see https://github.com/scala/community-builds/issues/568
    extra.exclude: ["tests"]
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name: "scala-logging"
    uri:  ${vars.uris.scala-logging-uri}
  }

  // uses wartremover which we can't handle, ticket on that is
  // https://github.com/scala/community-builds/issues/364
  // worked around for now by freezing at 2a75226 (September 2016)
  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  ${vars.base} {
    name: "mima"
    uri:  ${vars.uris.mima-uri}
    // we don't compile sbt plugins
    extra.exclude: ["sbtplugin"]
    // use scala-2.12 source directory for 2.13 too
    extra.commands: ${vars.default-commands} [
      "set unmanagedSourceDirectories in (core, Compile) += baseDirectory.value / \"core\" / \"src\" / \"main\" / \"scala-2.12\""
    ]
  }

  ${vars.base} {
    name: "pcplod"
    uri:  ${vars.uris.pcplod-uri}
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  // dependency of play-ws
  ${vars.base} {
    name: "cachecontrol"
    uri:  ${vars.uris.cachecontrol-uri}
  }

  // 3.5 is the current stable branch (as of Oct 2016)
  // there is also a brand-new development branch, 3.6, we should
  // maybe switch to at some point
  ${vars.base} {
    name: "json4s"
    uri:  ${vars.uris.json4s-uri}
    // TODO: exclude subprojects we don't want, rather than naming a few we want. probably adding more would work?
    extra.projects: ["json4s-native", "json4s-jackson", "json4s-ast"]
  }

  ${vars.base} {
    name: "scala-continuations"
    uri:  ${vars.uris.scala-continuations-uri}
  }

  ${vars.base} {
    name: "scalatags"
    uri:  ${vars.uris.scalatags-uri}
    extra.projects: ["scalatagsJVM"]  // no Scala.js
    extra.commands: ${vars.default-commands} [
      // their build.sbt has 'scalaVersion.value startsWith "2.12."', so that doesn't get 2.13
      "set unmanagedSourceDirectories in (scalatagsJVM, Compile) += baseDirectory.value / \"scalatags\" / \"shared\" / \"src\" / \"main\" / \"scala-2.11\""
    ]
  }

  ${vars.base} {
    name: "minitest"
    uri:  ${vars.uris.minitest-uri}
    extra.projects: ["minitestJVM", "lawsJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "log4s"
    uri:  ${vars.uris.log4s-uri}
  }

  // forked (October 2017) because utest 0.6.0 (we track utest master) made
  // a source-incompatible change but fansi is still on 0.5.3
  ${vars.base} {
    name: "fansi"
    uri:  ${vars.uris.fansi-uri}
    extra.projects: ["fansiJVM"]  // no Scala.js
  }

  // dependency of scalafix
  // (we use allanrenucci's fork because that's where `organization` is set
  // as scalafix expects; it's where 0.1.4 was apparently published from,
  // which is the version scalafix declares a dependency on)
  ${vars.base} {
    name: "scala-xml-quote"
    uri:  ${vars.uris.scala-xml-quote-uri}
  }

  ${vars.base} {
    name: "geny"
    uri:  ${vars.uris.geny-uri}
    extra.projects: ["genyJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "scalaj-http"
    uri:  ${vars.uris.scalaj-http-uri}
  }

  ${vars.base} {
    name: "scala-parallel-collections"
    uri:  ${vars.uris.scala-parallel-collections-uri}
    extra.commands: ${vars.default-commands} [
      // I have absolutely no idea why this would only be required in the
      // community build context, but without it, we get
      // java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing
      "set libraryDependencies in junit += \"org.hamcrest\" % \"hamcrest-core\" % \"1.3\" % \"test\""
    ]
  }

  // once https://github.com/scala/scala-collections-laws/pull/18
  // is merged we can track master
  ${vars.base} {
    name: "scala-collections-laws"
    uri: ${vars.uris.scala-collections-laws-uri}
    // as per the repo readme
    extra.options: ["-XX:MaxMetaspaceSize=1G", "-Xmx6G"]
    // note that we're not actually doing
    // `runMain tests.generated.collection.Test_All` which is what
    // the repo readme says to do. dbuild doesn't let us set
    // extra.test-tasks to a task that takes arguments.  (anyway,
    // it's not clear it's really necessary or appropriate to
    // actually run the whole thing as part of the community build?)
  }

  // dependency of scaladex
  ${vars.base} {
    name: "nscala-time"
    uri:  ${vars.uris.nscala-time-uri}
  }

  // dependency of elastic4s
  ${vars.base} {
    name: "sksamuel-exts"
    uri:  ${vars.uris.sksamuel-exts-uri}
  }

  // forked (December 2017) to disable sbt-pgp stuff that was prompting for a passphrase
  ${vars.base} {
    name: "paradox"
    uri:  ${vars.uris.paradox-uri}
    extra.exclude: ["plugin", "themePlugin", "genericTheme"]
  }

  // not (as of January 2018 anyway) an actively maintained project, so it's
  // droppable if it acts up
  ${vars.base} {
    name: "scala-sculpt"
    extra.sbt-version: ${vars.sbt-1-version}
    uri:  ${vars.uris.scala-sculpt-uri}
  }

]}

//// space: jawn_0_10

build += {

  space: scala.jawn_0_10

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}

//// space: jawn_0_11

build += {

  space: scala.jawn_0_11

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}

//// space: scalameta_1

build += {

  space: scala.jawn_0_10.scalameta_1

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}

//// space: scalameta_2

build += {

  space: scala.jawn_0_10.scalameta_2

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}
