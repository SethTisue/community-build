//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.17"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/typesafehub/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  projects: [
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      {
        set-version: "1.0.6"
        name:   scala-xml
        system: aether
        uri:   "aether:org.scala-lang.modules#scala-xml_2.12;1.0.6"
      }
    ]
  }
]}


//// everything else

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  // frozen (June 2017) at an April 2017 commit; newer commits
  // broke the scalacheck subproject of specs2
  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
    // because of new unused warnings in 2.12.2
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  // since the community build is JVM-only, other projects only depend scala-js
  // in order to get stubs.  building all of Scala.js and running its tests
  // takes a while, so let's save ourselves some time and build the stubs
  // separately.  not only that, but we use a frozen SHA, since the stubs
  // hardly ever change, so we can save time by not rebuilding downstream projects
  // everytime anything anywhere in the whole repo changes
  ${vars.base} {
    name: "scala-js-stubs"
    uri:  ${vars.uris.scala-js-stubs-uri}
    extra.projects: ["stubs"]
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
    extra.options: [
      // the Scala.js build expects this property to be set
      "-Dscala.ext.dirs=/Users/tisue/.sbt/0.13/java9-rt-ext-oracle_corporation_9_0_4"
    ]
  }

  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    extra.options: [
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      "-Xmx2048m"
      // the Scala.js build expects this property to be set
      "-Dscala.ext.dirs=/Users/tisue/.sbt/0.13/java9-rt-ext-oracle_corporation_9_0_4"
    ]
    // not really sure how this list was arrived at
    extra.projects: [ "io", "logging", "linker", "testSuite" ]
    // exclude it here because we build it separately in scala-js-stubs
    extra.exclude: ["stubs"]
    extra.commands: ${vars.default-commands} [
      // - Disable fatal Scaladoc warnings, too fragile
      "removeScalacOptions -Xfatal-warnings"
      // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
      //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
      //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
      "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
      "set MyScalaJSPlugin.wantSourceMaps in testSuite := false"
    ]
  }

  ${vars.base} {
    name: "utest"
    uri:  ${vars.uris.utest-uri}
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

]}
